The frontend app was generated by the tool Tkinter Designer by Parth Jadhav
The tool will convert your design in figma to python code
https://github.com/ParthJadhav/Tkinter-Designer

fix_field()
    Fixes the field size limit for CSV processing.
    Reference: https://stackoverflow.com/questions/15063936/csv-error-field-larger-than-field-limit-131072


resource_path(relative_path)
    Get absolute path to resource, works for dev and for PyInstaller
    https://stackoverflow.com/questions/7674790/bundling-data-files-with-pyinstaller-onefile

    Args:
    relative_path(Any): the sort path direct a file.

    Return:
    The full path direct a file


class TrieNode(builtins.object)
 |  Represents a node in a Trie data structure.
 |
 |  Attributes:
 |      meaning (str): The meaning associated with the word represented by this node.
 |      children (defaultdict): A dictionary of child nodes, where keys are characters and values are TrieNode objects.     
 |
 |  Methods defined here:
 |
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)


class Trie(builtins.object)
 |  A Trie (prefix tree) data structure for efficient word insertion, search, and prefix matching.
 |
 |  Attributes:
 |      root (TrieNode): The root node of the Trie.
 |
 |  Methods:
 |      insert(word: str, meaning: Any) -> None:
 |          Inserts a word into the Trie along with its associated meaning.
 |      search(word: str) -> Any:
 |          Searches for a word in the Trie and returns its meaning if found, else None.
 |      find_word(prefix: str) -> List[str]:
 |          Finds all words in the Trie that start with the given prefix.
 |
 |  Methods defined here:
 |
 |  __init__(self)
 |      Initializes an empty Trie with a root node.
 |
 |  another_search(self, prefix, node, word_list)
 |      Recursively searches for words in the Trie that start with the given prefix.
 |
 |      Args:
 |          prefix (str): The current prefix being constructed.
 |          node (TrieNode): The current Trie node being explored.
 |          word_list (List[str]): A list to store words found.
 |
 |      Returns:
 |          None
 |
 |  find_word(self, prefix)
 |      Finds all words in the Trie that start with the given prefix.
 |
 |      Args:
 |          prefix (str): The prefix to search for.
 |
 |      Returns:
 |          List[str]: A list of words starting with the specified prefix.
 |
 |  insert(self, word, meaning)
 |      Inserts a word into the Trie along with its associated meaning.
 |
 |      Args:
 |          word (str): The word to insert.
 |          meaning (Any): The meaning or value associated with the word.
 |
 |  search(self, word)
 |      Searches for a word in the Trie and returns its meaning if found, else None.
 |
 |      Args:
 |          word (str): The word to search for.
 |
 |      Returns:
 |          Any: The meaning associated with the word, or None if not found.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)


load_file_csv()
    Load word-meaning pairs from a CSV file into a Trie data structure.


load_flashcard_csv()
    Load level-word-meaning tuple from a CSV file into a priority queue.


save_flashcard()
    The function will save the words and meaning from the priority queue into a CSV file before close the window.

    Args:
        None


on_entry_click(event)
    The function create a placeholer into the textbox with content is "Enter English Word".


on_focus_out(event)
    The function keep content of the placeholder into the textbox will press mouse out the textbox.


check_key(event, entry, master)
    The function will check key release in textbox and suggest up to 5 word

    Args:
        entry(any): the parameter is textbox entry_1
        master(any): The parameter is a frame hold listbox.

    Return:
        None


on_select(event, entry)
    The function will insert the word you click on the listbox into the textbox entry_1.
    The function was called by the check_key function.

    Args:
        entry(any): the textbox entry_1

    Return:
        None


add_word_to_flashcard(word, meaning)
    The function add the word and meaning it's into the priority queue when click on the button_add.

    Args:
        word(string): the word you want insert into the priority queue.
        meaning: mean of the word you want insert into the priority queue.

    Return:
        None

search_defination(event)
    The fucntion will search defination of the word in textbox entry_1 when click on the search button.

    Args:
        None

    Return:
    mean of the word you are looking up or the frame with contain is "not found" will pop up to screen if the word is not in database.

button_3_press()
    Creates a flashcard frame and displays the first word when transitioning to the flashcard screen.

    Args:
        None

    Returns:
        None

button_2_press()
    Creates a new frame to save the meaning of a word.

    Args:
        None

    Retrun:
        None

press_flip(word, meaning)
    Toggles between displaying the word and its meaning in a graphical interface.

    Args:
        word (str): The word to display.
        meaning (str): The meaning of the word (semicolon-separated if multiple meanings).
    Return:
        None

make_next_word()
    Retrieves the next word from a queue and displays it in a graphical interface.

    Args:
        None

    Return:
        None

press_nextbutton(level, word, meaning)
    Adds a word to the queue and triggers the display of the next word.

    Args:
        level (str): The level of the word.
        word (str): The word to display.
        meaning (str): The meaning of the word.

    Return:
        None